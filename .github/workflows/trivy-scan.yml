name: Trivy Image Scan Workflow

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  trivy-image-scan:
    runs-on: ubuntu-latest

    steps:
      # ✅ Step 1: Checkout the repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # ✅ Step 2: Install Trivy (no automatic scan!)
      - name: Install Trivy
        uses: aquasecurity/setup-trivy@v0.2.1

      # ✅ Step 3: Run security gate scans
      - name: Security Gate - NGINX
        run: trivy image --exit-code 1 --severity HIGH,CRITICAL nginx:1.21

      - name: Security Gate - Alpine
        run: trivy image --exit-code 1 --severity HIGH,CRITICAL alpine:3.12

      - name: Security Gate - DVWA
        run: trivy image --exit-code 1 --severity HIGH,CRITICAL vulnerables/web-dvwa

      - name: Security Gate - Node
        run: trivy image --exit-code 1 --severity HIGH,CRITICAL node:12

      - name: Security Gate - Python
        run: trivy image --exit-code 1 --severity HIGH,CRITICAL python:3.4-alpine

      # ✅ Step 4: Generate JSON reports (always run, even if gate fails)
      - name: Generate Trivy reports
        if: always()
        run: |
          trivy image -f json -o trivy-report-nginx.json nginx:1.21
          trivy image -f json -o trivy-report-alpine.json alpine:3.12
          trivy image -f json -o trivy-report-dvwa.json vulnerables/web-dvwa
          trivy image -f json -o trivy-report-node.json node:12
          trivy image -f json -o trivy-report-python.json python:3.4-alpine

      # ✅ Step 5: Upload the reports
      - name: Upload Trivy scan reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: |
            trivy-report-nginx.json
            trivy-report-alpine.json
            trivy-report-dvwa.json
            trivy-report-node.json
            trivy-report-python.json
